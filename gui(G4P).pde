/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:735725:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  col = color(random(0,360),255,255);
} //_CODE_:button1:735725:

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:734817:
  println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
    D = source.getValueI();
} //_CODE_:slider1:734817:

public void slider2d1_change1(GSlider2D source, GEvent event) { //_CODE_:slider2d1:577436:
  println("slider2d1 - GSlider2D >> GEvent." + event + " @ " + millis());
  x = source.getValueXI();
  y = source.getValueYI();
} //_CODE_:slider2d1:577436:

public void knob1_turn1(GKnob source, GEvent event) { //_CODE_:knob1:761938:
  println("knob1 - GKnob >> GEvent." + event + " @ " + millis());
  we = source.getValueI();
} //_CODE_:knob1:761938:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  button1 = new GButton(this, 24, 12, 96, 30);
  button1.setText("Color");
  button1.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  button1.addEventHandler(this, "button1_click1");
  slider1 = new GSlider(this, 12, 48, 120, 60, 10.0);
  slider1.setShowValue(true);
  slider1.setShowLimits(true);
  slider1.setLimits(50.0, 10.0, 200.0);
  slider1.setShowTicks(true);
  slider1.setNumberFormat(G4P.DECIMAL, 2);
  slider1.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  slider1.setOpaque(false);
  slider1.addEventHandler(this, "slider1_change1");
  slider2d1 = new GSlider2D(this, 12, 192, 120, 120);
  slider2d1.setLimitsX(150.0, 150.0, 480.0);
  slider2d1.setLimitsY(1.0, 0.0, 320.0);
  slider2d1.setNumberFormat(G4P.DECIMAL, 2);
  slider2d1.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  slider2d1.setOpaque(true);
  slider2d1.addEventHandler(this, "slider2d1_change1");
  knob1 = new GKnob(this, 36, 108, 72, 84, 0.8);
  knob1.setTurnRange(110, 70);
  knob1.setTurnMode(GKnob.CTRL_HORIZONTAL);
  knob1.setSensitivity(1);
  knob1.setShowArcOnly(false);
  knob1.setOverArcOnly(false);
  knob1.setIncludeOverBezel(false);
  knob1.setShowTrack(true);
  knob1.setLimits(0.5, 0.0, 20.0);
  knob1.setShowTicks(true);
  knob1.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  knob1.setOpaque(false);
  knob1.addEventHandler(this, "knob1_turn1");
}

// Variable declarations 
// autogenerated do not edit
GButton button1; 
GSlider slider1; 
GSlider2D slider2d1; 
GKnob knob1; 
